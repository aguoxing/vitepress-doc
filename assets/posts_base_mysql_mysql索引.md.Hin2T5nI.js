import{_ as t,c as a,o as i,a2 as e}from"./chunks/framework.EbqfbvUB.js";const u=JSON.parse('{"title":"MySQL索引","description":"索引结构、分类、语法","frontmatter":{"title":"MySQL索引","description":"索引结构、分类、语法","date":"2022-08-21T00:00:00.000Z","category":"MySQL","tags":["索引"]},"headers":[],"relativePath":"posts/base/mysql/mysql索引.md","filePath":"posts/base/mysql/mysql索引.md","lastUpdated":1691294280000}'),s={name:"posts/base/mysql/mysql索引.md"},l=e(`<h1 id="mysql索引" tabindex="-1">MySQL索引 <a class="header-anchor" href="#mysql索引" aria-label="Permalink to &quot;MySQL索引&quot;">​</a></h1><h2 id="索引介绍" tabindex="-1">索引介绍 <a class="header-anchor" href="#索引介绍" aria-label="Permalink to &quot;索引介绍&quot;">​</a></h2><blockquote><p>索引（index）是帮助MySQL<strong>高效获取数据</strong>的<strong>数据结构</strong>（<strong>有序</strong>）。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构之上实现高级查找算法，这种数据结构就是索引。</p></blockquote><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ol><li>提高数据检索的效率，降低数据库的IO成本</li><li>通过索引对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ol><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ol><li>索引列也需要占用存储空间：索引实际上也是一张表，记录了逐渐与索引字段，一般以索引文件的形式存储在磁盘中</li><li>索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE时，效率降低</li></ol><h2 id="索引结构" tabindex="-1">索引结构 <a class="header-anchor" href="#索引结构" aria-label="Permalink to &quot;索引结构&quot;">​</a></h2><p>MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的结构，主要包含以下几种：</p><ol><li><strong>B+tree索引</strong>：最常见的索引类型，大部分引擎都支持B+树索引</li><li>Hash索引：底层数据结构是用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询</li><li>R-tree索引：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常较少使用</li><li>Full-text索引：是一种通过建立倒排索引，快速匹配文档的方式。类似于Lucene、Solr、ES</li></ol><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+tree</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-tree</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h2 id="索引分类" tabindex="-1">索引分类 <a class="header-anchor" href="#索引分类" aria-label="Permalink to &quot;索引分类&quot;">​</a></h2><h3 id="_1-按照字段特性分类" tabindex="-1">1.按照字段特性分类 <a class="header-anchor" href="#_1-按照字段特性分类" aria-label="Permalink to &quot;1.按照字段特性分类&quot;">​</a></h3><ol><li><p>主键索引（PRIMARY）</p><p>含义：针对于表中主键创建的索引</p><p>特点：索引列中的值必须是唯一的，不允许有空值。 普通索引 MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值</p></li><li><p>普通索引</p><p>含义：快速定位特定数据</p><p>特点：MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值</p></li><li><p>唯一索引（UNIQUE）</p><p>含义：避免同一个表中某数据列中的值重复</p><p>特点：索引列中的值必须是唯一的，但是允许为空值</p></li><li><p>全文索引（FULLTEXT）</p><p>含义：全文索引查找的是文本中的关键词，而不是比较索引中的值</p><p>特点： 只能在文本类型CHAR,VARCHAR,TEXT类型字段上创建全文索引。字段长度比较大时，如果创建普 通索引，在进行like模糊查询时效率比较低，这时可以创建全文索引。MyISAM和InnoDB中都可以使用全文索引</p></li><li><p>前缀索引</p><p>含义：</p><p>特点：在文本类型如CHAR,VARCHAR,TEXT类列上创建索引时，可以指定索引列的长度，但是数值类型不 能指定</p></li><li><p>空间索引</p><p>含义：</p><p>特点：MySQL在5.7之后的版本支持了空间索引，而且支持OpenGIS几何数据模型。MySQL在空间索引这 方面遵循OpenGIS几何数据模型规则</p></li></ol><h3 id="_2-按照索引字段数量分类" tabindex="-1">2.按照索引字段数量分类 <a class="header-anchor" href="#_2-按照索引字段数量分类" aria-label="Permalink to &quot;2.按照索引字段数量分类&quot;">​</a></h3><ol><li><p>单列索引：建立在单个列上的索引被称为单列索引</p></li><li><p>组合索引：建立在多个列上的索引被称为联合索引，又叫复合索引、组合索引</p><p>组合索引的使用，需要遵循<strong>最左前缀匹配原则</strong>（<strong>最左匹配原则</strong>）。一般情况下在条件允许的情况下使用组合索引替代多个单列索引使用。</p></li></ol><h3 id="_3-按照物理存储分类" tabindex="-1">3.按照物理存储分类 <a class="header-anchor" href="#_3-按照物理存储分类" aria-label="Permalink to &quot;3.按照物理存储分类&quot;">​</a></h3><p>在InnoDB存储引擎中，MySQL索引按叶子节点存储的是否为完整表数据分为：<strong>聚簇索引、二级索引（辅助索引）</strong>。全表数据存储在聚簇索引中，聚簇索引以外的其他索引叫做二级索引，也叫辅助索引。</p><ol><li><p>聚簇索引</p><p>含义：将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据</p><p>特点：必须有，而且只 有一个</p><p>聚集索引选取规则:</p><p>如果存在主键，主键索引就是聚集索引</p><p>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引</p><p>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索 引</p></li><li><p>非聚簇索引</p><p>含义：将数据与索引分开存储，索引结构的叶子节点关 联的是对应的主键</p><p>特点：可以存在多个</p></li></ol><blockquote><p>回表查询： 先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取数据的方式，就称之为回表查询</p></blockquote><h2 id="索引语法" tabindex="-1">索引语法 <a class="header-anchor" href="#索引语法" aria-label="Permalink to &quot;索引语法&quot;">​</a></h2><ul><li>创建索引</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ UNIQUE | FULLTEXT ] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table_name(index_col_name,... );</span></span></code></pre></div><ul><li>查看索引</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INDEX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table_name;</span></span></code></pre></div><ul><li>删除索引</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DROP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table_name;</span></span></code></pre></div><h2 id="sql性能分析" tabindex="-1">SQL性能分析 <a class="header-anchor" href="#sql性能分析" aria-label="Permalink to &quot;SQL性能分析&quot;">​</a></h2><h3 id="_1-sql执行频率" tabindex="-1">1.SQL执行频率 <a class="header-anchor" href="#_1-sql执行频率" aria-label="Permalink to &quot;1.SQL执行频率&quot;">​</a></h3><h3 id="_2-慢查询日志" tabindex="-1">2.慢查询日志 <a class="header-anchor" href="#_2-慢查询日志" aria-label="Permalink to &quot;2.慢查询日志&quot;">​</a></h3><h3 id="_3-profile详情" tabindex="-1">3.profile详情 <a class="header-anchor" href="#_3-profile详情" aria-label="Permalink to &quot;3.profile详情&quot;">​</a></h3><h3 id="_4-explain" tabindex="-1">4.EXPLAIN <a class="header-anchor" href="#_4-explain" aria-label="Permalink to &quot;4.EXPLAIN&quot;">​</a></h3><p>EXPLAIN 或者 DESC命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行 过程中表如何连接和连接的顺序</p><ul><li>语法</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 直接在select语句之前加上关键字 explain / desc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXPLAIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 字段列表 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 条件;</span></span></code></pre></div><ul><li>EXPLAIN 执行计划中各个字段的含义</li></ul><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，表示查询中执行select子句或者是操作表的顺序 (id相同，执行顺序从上到下；id不同，值越大，越先执行)。</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接 或者子查询）、PRIMARY（主查询，即外层的查询）、 UNION（UNION 中的第二个或者后面的查询语句）、 SUBQUERY（SELECT/WHERE之后包含了子查询）等</td></tr><tr><td>type</td><td>表示连接类型，性能由好到差的连接类型为NULL、system、const、 eq_ref、ref、range、 index、all 。</td></tr><tr><td>possible_key</td><td>显示可能应用在这张表上的索引，一个或多个。</td></tr><tr><td>key</td><td>实际使用的索引，如果为NULL，则没有使用索引。</td></tr><tr><td>key_len</td><td>表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。</td></tr><tr><td>rows</td><td>MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值， 可能并不总是准确的。</td></tr><tr><td>filtered</td><td>表示返回结果的行数占需读取行数的百分比， filtered 的值越大越好。</td></tr></tbody></table><h2 id="索引使用" tabindex="-1">索引使用 <a class="header-anchor" href="#索引使用" aria-label="Permalink to &quot;索引使用&quot;">​</a></h2><h2 id="索引设计原则" tabindex="-1">索引设计原则 <a class="header-anchor" href="#索引设计原则" aria-label="Permalink to &quot;索引设计原则&quot;">​</a></h2><p><a href="https://dev.mysql.com/doc/" target="_blank" rel="noreferrer">MySQL官方文档</a></p><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noreferrer">数据可视化</a></p>`,41),r=[l];function h(d,n,p,o,k,c){return i(),a("div",null,r)}const b=t(s,[["render",h]]);export{u as __pageData,b as default};
